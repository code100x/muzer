// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  provider       Provider
  streams        Stream[]         @relation("user")
  upvotes        Upvote[]
  addedStreams   Stream[]         @relation("addedBy")
  hostedSpaces   Space[]          @relation("hostedBy")
  remainingCreds RemainingCreds[]
}

model Stream {
  id            String         @id @default(uuid())
  type          StreamType
  url           String
  extractedId   String
  title         String         @default("")
  smallImg      String         @default("")
  bigImg        String         @default("")
  active        Boolean        @default(true)
  played        Boolean        @default(false)
  playedTs      DateTime?
  createAt      DateTime       @default(now())
  upvotes       Upvote[]
  userId        String
  user          User           @relation(fields: [userId], references: [id], name: "user")
  currentStream CurrentStream?
  addedBy       String
  addedByUser   User           @relation("addedBy", fields: [addedBy], references: [id])
  spaceId       String?
  space         Space?         @relation("spaceStreams", fields: [spaceId], references: [id], onDelete: Cascade)
}

model CurrentStream {
  id       String  @id @default(uuid())
  userId   String
  streamId String? @unique
  stream   Stream? @relation(fields: [streamId], references: [id])
  spaceId  String? @unique
  space    Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Upvote {
  id       String @id @default(uuid())
  userId   String
  streamId String
  user     User   @relation(fields: [userId], references: [id])
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@unique([userId, streamId])
}

model Space {
  id             String           @id @default(uuid())
  name           String
  streams        Stream[]         @relation("spaceStreams")
  hostId         String
  host           User             @relation("hostedBy", fields: [hostId], references: [id])
  isActive       Boolean          @default(true)
  currentStream  CurrentStream?
  remainingCreds RemainingCreds[]
}

model RemainingCreds {
  id             String @id @default(uuid())
  userId         String
  user           User   @relation(fields: [userId], references: [id])
  spaceId        String
  space          Space  @relation(fields: [spaceId], references: [id])
  remainingCreds Int

  @@unique([userId, spaceId])
}

enum StreamType {
  Spotify
  Youtube
}

enum Provider {
  Google
}
